{"ast":null,"code":"// import React, { Component } from \"react\";\n// class Rating extends Component {\n//   constructor(){\n//     super();\n//      this.state = {\n//       value: 5,\n//     };   \n//   }\n// Not that we are using an arrow function in here\n// If we just use the standard function, we will need to bind the finction inside our constructor. The arrow function does the binding for us automatically \n// increment = () => {\n// This works, but it is prone to error\n// During times where React doesn't imidiatelly accept the request of this function, it wouldn't work  \n// this.setState({\n//   value: this.state.value + 1\n// });\n// To check that this one fails, lets write something that should be dependent on the updated value \n// this.setState({\n//   value: this.state.value + 1\n// });\n// this.setState({\n//   value: this.state.value - 1\n// });\n// If we use an updater function to pass the current state instead, it will work\n// this.setState((prevState) => {\n//   return {\n//     value: prevState.value + 1,\n//   };\n// });\n// this.setState((state) => {\n//   return {\n//     value: state.value - 2,\n//   };\n// });\n// For the purpose of our example, lets just make the increment function arr the rating by one \n//     this.setState((state) => {\n//       return {\n//         value: state.value + 1,\n//       };\n//     });\n// };\n// decrement = () => {\n// The same thing for our decrement function \n// Lets make it so that it decreases the rating by 1 \n// this.setState((state) => {\n//     return {\n//       value: state.value - 1,\n//     };\n//   });\n// };\n//   render() {\n//     // Conditional rendering in React \n//     let initialText = \"Average rating:\";\n//     let changedText = \"You rated this product:\"\n//     let displayText = \"\"; \n//     let counter = 1; \n//     if(this.state.value != 5){\n//       counter = counter + 1; \n//     }\n//     if(counter >= 2){\n//       displayText = changedText;\n//     }else{\n//       displayText = initialText; \n//     }\n//     return (\n//       <div className=\"rating-wrapper\">\n//         <h3>Please rate this mac out of 10</h3> \n//         <div>\n//           <button className=\"postive\" onClick={this.increment}> Rate up </button>\n//           <button className=\"negative\" onClick={this.decrement}> Rate down </button>\n//           <div className=\"rating-result\"> {displayText} {this.state.value}</div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// export default Rating;","map":{"version":3,"sources":["C:/Users/Owner/Desktop/Evangadi projects/phase 3/week 4/react-components/src/Components/Main/Rating/Rating.js"],"names":[],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEE;AACA;AAEA;AACE;AACA;AAEE;AACA;AACA;AAGF;AAEE;AACA;AACA;AAEA;AACA;AACA;AAEF;AAEE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { Component } from \"react\";\r\n\r\n// class Rating extends Component {\r\n\r\n//   constructor(){\r\n//     super();\r\n//      this.state = {\r\n//       value: 5,\r\n//     };   \r\n//   }\r\n\r\n  // Not that we are using an arrow function in here\r\n  // If we just use the standard function, we will need to bind the finction inside our constructor. The arrow function does the binding for us automatically \r\n\r\n  // increment = () => {\r\n    // This works, but it is prone to error\r\n    // During times where React doesn't imidiatelly accept the request of this function, it wouldn't work  \r\n    \r\n      // this.setState({\r\n      //   value: this.state.value + 1\r\n      // });\r\n\r\n\r\n    // To check that this one fails, lets write something that should be dependent on the updated value \r\n\r\n      // this.setState({\r\n      //   value: this.state.value + 1\r\n      // });\r\n\r\n      // this.setState({\r\n      //   value: this.state.value - 1\r\n      // });\r\n\r\n    // If we use an updater function to pass the current state instead, it will work\r\n\r\n      // this.setState((prevState) => {\r\n      //   return {\r\n      //     value: prevState.value + 1,\r\n      //   };\r\n      // });\r\n\r\n      // this.setState((state) => {\r\n      //   return {\r\n      //     value: state.value - 2,\r\n      //   };\r\n      // });\r\n\r\n    // For the purpose of our example, lets just make the increment function arr the rating by one \r\n  //     this.setState((state) => {\r\n  //       return {\r\n  //         value: state.value + 1,\r\n  //       };\r\n  //     });\r\n  // };\r\n  // decrement = () => {\r\n\r\n    // The same thing for our decrement function \r\n    // Lets make it so that it decreases the rating by 1 \r\n    // this.setState((state) => {\r\n    //     return {\r\n    //       value: state.value - 1,\r\n    //     };\r\n    //   });\r\n    // };\r\n\r\n//   render() {\r\n//     // Conditional rendering in React \r\n//     let initialText = \"Average rating:\";\r\n//     let changedText = \"You rated this product:\"\r\n//     let displayText = \"\"; \r\n\r\n//     let counter = 1; \r\n\r\n//     if(this.state.value != 5){\r\n//       counter = counter + 1; \r\n//     }\r\n\r\n//     if(counter >= 2){\r\n//       displayText = changedText;\r\n//     }else{\r\n//       displayText = initialText; \r\n//     }\r\n//     return (\r\n//       <div className=\"rating-wrapper\">\r\n//         <h3>Please rate this mac out of 10</h3> \r\n//         <div>\r\n//           <button className=\"postive\" onClick={this.increment}> Rate up </button>\r\n//           <button className=\"negative\" onClick={this.decrement}> Rate down </button>\r\n//           <div className=\"rating-result\"> {displayText} {this.state.value}</div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Rating;"]},"metadata":{},"sourceType":"module"}